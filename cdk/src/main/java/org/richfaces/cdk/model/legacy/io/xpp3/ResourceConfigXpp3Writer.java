/*
 =================== DO NOT EDIT THIS FILE ====================
 Generated by Modello 1.0.2 on 2014-10-23 14:13:56,
 any modifications will be overwritten.
 ==============================================================
 */

package org.richfaces.cdk.model.legacy.io.xpp3;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.Writer;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.Locale;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;
import org.richfaces.cdk.model.legacy.Renderer;
import org.richfaces.cdk.model.legacy.Resource;
import org.richfaces.cdk.model.legacy.ResourceConfig;

/**
 * Class ResourceConfigXpp3Writer.
 * 
 * @version $Revision$ $Date$
 */
public class ResourceConfigXpp3Writer
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field NAMESPACE.
     */
    private static final String NAMESPACE = null;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer
     * @param resourceConfig
     * @throws java.io.IOException
     */
    public void write( Writer writer, ResourceConfig resourceConfig )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( writer );
        serializer.startDocument( resourceConfig.getModelEncoding(), null );
        writeResourceConfig( resourceConfig, "resource-config", serializer );
        serializer.endDocument();
    } //-- void write( Writer, ResourceConfig )

    /**
     * Method writeRenderer.
     * 
     * @param renderer
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeRenderer( Renderer renderer, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( renderer != null )
        {
            serializer.startTag( NAMESPACE, tagName );
            if ( renderer.getClassName() != null )
            {
                serializer.attribute( NAMESPACE, "class", renderer.getClassName() );
            }
            serializer.endTag( NAMESPACE, tagName );
        }
    } //-- void writeRenderer( Renderer, String, XmlSerializer )

    /**
     * Method writeResource.
     * 
     * @param resource
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeResource( Resource resource, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( resource != null )
        {
            serializer.startTag( NAMESPACE, tagName );
            if ( resource.getClassName() != null )
            {
                serializer.attribute( NAMESPACE, "class", resource.getClassName() );
            }
            if ( resource.getName() != null )
            {
                serializer.startTag( NAMESPACE, "name" ).text( resource.getName() ).endTag( NAMESPACE, "name" );
            }
            if ( resource.getPath() != null )
            {
                serializer.startTag( NAMESPACE, "path" ).text( resource.getPath() ).endTag( NAMESPACE, "path" );
            }
            if ( resource.getRenderer() != null )
            {
                writeRenderer( (Renderer) resource.getRenderer(), "renderer", serializer );
            }
            serializer.endTag( NAMESPACE, tagName );
        }
    } //-- void writeResource( Resource, String, XmlSerializer )

    /**
     * Method writeResourceConfig.
     * 
     * @param resourceConfig
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeResourceConfig( ResourceConfig resourceConfig, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( resourceConfig != null )
        {
            serializer.startTag( NAMESPACE, tagName );
            if ( ( resourceConfig.getResources() != null ) && ( resourceConfig.getResources().size() > 0 ) )
            {
                for ( Iterator iter = resourceConfig.getResources().iterator(); iter.hasNext(); )
                {
                    Resource o = (Resource) iter.next();
                    writeResource( o, "resource", serializer );
                }
            }
            serializer.endTag( NAMESPACE, tagName );
        }
    } //-- void writeResourceConfig( ResourceConfig, String, XmlSerializer )


}
